// Generated by CoffeeScript 1.3.3
(function() {
  var LocalStorage, fs, path, _emptyDirectory, _rm;

  path = require('path');

  fs = require('fs');

  _emptyDirectory = function(target) {
    var p, _i, _len, _ref, _results;
    _ref = fs.readdirSync(target);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(_rm(path.join(target, p)));
    }
    return _results;
  };

  _rm = function(target) {
    if (fs.statSync(target).isDirectory()) {
      _emptyDirectory(target);
      return fs.rmdirSync(target);
    } else {
      return fs.unlinkSync(target);
    }
  };

  LocalStorage = (function() {

    function LocalStorage(location) {
      this.location = location;
      this.length = 0;
      this.keys = [];
      this._init();
    }

    LocalStorage.prototype._init = function() {
      if (fs.existsSync(this.location)) {
        if (!fs.statSync(this.location).isDirectory()) {
          throw new Error("A file exists at the location '" + this.location + "' when trying to create/open localStorage");
        }
      }
      if (!fs.existsSync(this.location)) {
        fs.mkdirSync(this.location);
      }
      this.keys = fs.readdirSync(this.location);
      return this.length = this.keys.length;
    };

    LocalStorage.prototype.setItem = function(key, value) {
      var existsBeforeSet, filename;
      key = key.toString();
      filename = path.join(this.location, key);
      existsBeforeSet = fs.existsSync(filename);
      fs.writeFileSync(filename, value.toString(), 'utf8');
      if (!existsBeforeSet) {
        this.keys.push(key);
        return this.length = this.keys.length;
      }
    };

    LocalStorage.prototype.getItem = function(key) {
      var filename;
      key = key.toString();
      filename = path.join(this.location, key);
      if (fs.existsSync(filename)) {
        return fs.readFileSync(filename, 'utf8');
      } else {
        return null;
      }
    };

    LocalStorage.prototype.removeItem = function(key) {
      var filename;
      key = key.toString();
      filename = path.join(this.location, key);
      if (fs.existsSync(filename)) {
        _rm(filename);
      }
      return this._init();
    };

    LocalStorage.prototype.key = function(n) {
      return this.keys[n];
    };

    LocalStorage.prototype.clear = function() {
      _emptyDirectory(this.location);
      this.keys = [];
      return this.length = 0;
    };

    LocalStorage.prototype._deleteLocation = function() {
      _rm(this.location);
      this.keys = [];
      return this.length = 0;
    };

    return LocalStorage;

  })();

  exports.LocalStorage = LocalStorage;

}).call(this);
